import asyncio
import sqlite3
import json
import pandas as pd
from telebot.async_telebot import AsyncTeleBot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ === #
TOKEN = "7382794283:AAFgyE1omxNsALuiSzH9UZXgk2y54OdkxHc"
CHANNEL_USERNAME = "@levite_test"
bot = AsyncTeleBot(TOKEN)

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (JSON) === #
USER_DATA_FILE = "user_data.json"

try:
    with open(USER_DATA_FILE, "r", encoding="utf-8") as file:
        user_data = json.load(file)
except FileNotFoundError:
    user_data = {}

def save_user_data():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    with open(USER_DATA_FILE, "w", encoding="utf-8") as file:
        json.dump(user_data, file, ensure_ascii=False, indent=4)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö === #
def init_db():
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS employees (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id INTEGER UNIQUE,
        name TEXT,
        username TEXT,
        is_admin INTEGER DEFAULT 0
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS shifts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        employee_id INTEGER,
        start_time TEXT,
        end_time TEXT,
        FOREIGN KEY (employee_id) REFERENCES employees(id)
    )
    ''')

    conn.commit()
    conn.close()

# === –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–æ —Å–º–µ–Ω–∞–º–∏ === #
def start_shift(telegram_id):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()

    cursor.execute("SELECT id FROM employees WHERE telegram_id=?", (telegram_id,))
    employee = cursor.fetchone()

    if employee:
        cursor.execute("INSERT INTO shifts (employee_id, start_time) VALUES (?, datetime('now'))", (employee[0],))
        conn.commit()
        return "‚úÖ –ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ!"
    return "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."

def end_shift(telegram_id):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()

    cursor.execute("SELECT id FROM employees WHERE telegram_id=?", (telegram_id,))
    employee = cursor.fetchone()

    if employee:
        cursor.execute("UPDATE shifts SET end_time = datetime('now') WHERE employee_id = ? AND end_time IS NULL", (employee[0],))
        conn.commit()
        return "‚úÖ –ö–æ–Ω–µ—Ü —Å–º–µ–Ω—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!"
    return "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."

# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ === #
@bot.message_handler(commands=['start'])
async def send_welcome(message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    chat_id = str(message.chat.id)
    user = user_data.get(chat_id)

    if user:
        if user.get("state") == "logged_in":
            await bot.send_message(chat_id, f"‚úÖ –í—ã —É–∂–µ –≤–æ—à–ª–∏, {user['name']}!")
            await show_main_menu(chat_id, user.get("is_admin", False))
        elif user.get("state") == "registered":
            user["state"] = "awaiting_login_password"
            save_user_data()
            await bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç, {user['name']}! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞:")
        else:
            await bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    else:
        await bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

@bot.message_handler(func=lambda message: user_data.get(str(message.chat.id), {}).get("state") == "awaiting_login_password")
async def login_password_check(message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∏ –∑–∞–ø—É—Å–∫ –º–µ–Ω—é"""
    chat_id = str(message.chat.id)
    user = user_data.get(chat_id)

    if message.text.strip() == user.get("password"):
        user["state"] = "logged_in"
        user["is_admin"] = False  

        try:
            member = await bot.get_chat_member(CHANNEL_USERNAME, int(chat_id))
            if member.status in ['administrator', 'creator']:
                user["is_admin"] = True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∞: {e}")

        save_user_data()
        await bot.send_message(chat_id, f"‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['name']}!")
        await show_main_menu(chat_id, user["is_admin"])
    else:
        await bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# === –ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ === #
async def show_main_menu(chat_id, is_admin=False):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        KeyboardButton("üìÖ –ú–æ–∏ —Å–º–µ–Ω—ã"),
        KeyboardButton("üìç –û—Ç–º–µ—Ç–∏—Ç—å—Å—è"),
        KeyboardButton("üë§ –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    )

    if is_admin:
        keyboard.add(KeyboardButton("üë• –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤"))

    await bot.send_message(chat_id, "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ === #
@bot.message_handler(func=lambda message: message.text in ["üìÖ –ú–æ–∏ —Å–º–µ–Ω—ã", "üìç –û—Ç–º–µ—Ç–∏—Ç—å—Å—è", "üë§ –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "üë• –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤"])
async def menu_handler(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫"""
    chat_id = str(message.chat.id)
    user = user_data.get(chat_id)

    if message.text == "üìÖ –ú–æ–∏ —Å–º–µ–Ω—ã":
        await bot.send_message(chat_id, "üìÜ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω.")
    
    elif message.text == "üìç –û—Ç–º–µ—Ç–∏—Ç—å—Å—è":
        response = start_shift(chat_id) if not check_active_shift(chat_id) else end_shift(chat_id)
        await bot.send_message(chat_id, response)

    elif message.text == "üë§ –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        user_info = (
            f"üë§ –ò–º—è: {user.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üîë –õ–æ–≥–∏–Ω: {user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üõ† –†–æ–ª—å: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if user.get('is_admin') else '–û—Ñ–∏—Ü–∏–∞–Ω—Ç'}"
        )
        await bot.send_message(chat_id, user_info)

    elif message.text == "üë• –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤" and user.get("is_admin"):
        await bot.send_message(chat_id, "üìã –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç.")

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª === #
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    init_db()
    await bot.polling()

if __name__ == "__main__":
    asyncio.run(main())
